{"ast":null,"code":"const azureUrl = \"https://apithuindercat-feacp20240519232636.azurewebsites.net/api\";\nexport const criarUsuario = async (nome, senha_hash, email) => {\n  try {\n    const url = azureUrl + \"/Servidor\";\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nome,\n        senha_hash,\n        email\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Alguns dos dados enviados não estão corretos\");\n    }\n    const usuarioCriado = await res.text();\n    return usuarioCriado;\n  } catch (e) {\n    throw e;\n  }\n};\nexport const criarOng = async (nome, senha_hash, cnpj, email) => {\n  try {\n    const url = azureUrl + \"/ong/ong\";\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nome,\n        senha_hash,\n        cnpj,\n        email\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Alguns dos dados enviados não estão corretos\");\n    }\n    const usuarioCriado = await res.text();\n    return usuarioCriado;\n  } catch (e) {\n    throw e;\n  }\n};\n\n// Função de autenticação do usuário\nexport const autenticacaoUsuario = async (senha_hash, email) => {\n  try {\n    const url = \"https://apithuindercat-feacp20240519232636.azurewebsites.net/api/Servidor/Login\";\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        senha_hash,\n        email\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Email ou senha estão incorretos\");\n    }\n    const data = await res.json();\n    return data.email;\n  } catch (e) {\n    throw e;\n  }\n};","map":{"version":3,"names":["azureUrl","criarUsuario","nome","senha_hash","email","url","res","fetch","method","headers","body","JSON","stringify","ok","Error","usuarioCriado","text","e","criarOng","cnpj","autenticacaoUsuario","data","json"],"sources":["C:/Users/mathe/OneDrive/Área de Trabalho/PO/ThunderCat - 20052024 (1)/src/Funções/Usuario.js"],"sourcesContent":["const azureUrl = \"https://apithuindercat-feacp20240519232636.azurewebsites.net/api\";\r\n\r\n\r\n\r\n\r\nexport const criarUsuario = async (nome,senha_hash, email) => {\r\n    try {\r\n      const url = azureUrl + \"/Servidor\";\r\n    \r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ nome, senha_hash, email })\r\n      });\r\n  \r\n      if (!res.ok) {\r\n        throw new Error(\"Alguns dos dados enviados não estão corretos\");\r\n      }\r\n      \r\n      const usuarioCriado = await res.text();\r\n    \r\n      return usuarioCriado;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  };\r\n  \r\n  export const criarOng = async (nome,senha_hash, cnpj, email) => {\r\n    try {\r\n      const url = azureUrl + \"/ong/ong\";\r\n    \r\n      const res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ nome, senha_hash,cnpj, email })\r\n      });\r\n  \r\n      if (!res.ok) {\r\n        throw new Error(\"Alguns dos dados enviados não estão corretos\");\r\n      }\r\n      \r\n      const usuarioCriado = await res.text();\r\n    \r\n      return usuarioCriado;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  // Função de autenticação do usuário\r\nexport const autenticacaoUsuario = async (senha_hash, email) => {\r\n  try {\r\n      const url = \"https://apithuindercat-feacp20240519232636.azurewebsites.net/api/Servidor/Login\";\r\n  \r\n      const res = await fetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ senha_hash, email })\r\n      });\r\n\r\n      if (!res.ok) {\r\n          throw new Error(\"Email ou senha estão incorretos\");\r\n      }\r\n    \r\n      const data = await res.json();\r\n      return data.email;\r\n  } catch (e) {\r\n      throw e;\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kEAAkE;AAKnF,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAACC,UAAU,EAAEC,KAAK,KAAK;EAC1D,IAAI;IACF,MAAMC,GAAG,GAAGL,QAAQ,GAAG,WAAW;IAElC,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC3BG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,IAAI;QAAEC,UAAU;QAAEC;MAAM,CAAC;IAClD,CAAC,CAAC;IAEF,IAAI,CAACE,GAAG,CAACO,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IACjE;IAEA,MAAMC,aAAa,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAEtC,OAAOD,aAAa;EACtB,CAAC,CAAC,OAAOE,CAAC,EAAE;IACV,MAAMA,CAAC;EACT;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOhB,IAAI,EAACC,UAAU,EAAEgB,IAAI,EAAEf,KAAK,KAAK;EAC9D,IAAI;IACF,MAAMC,GAAG,GAAGL,QAAQ,GAAG,UAAU;IAEjC,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC3BG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,IAAI;QAAEC,UAAU;QAACgB,IAAI;QAAEf;MAAM,CAAC;IACvD,CAAC,CAAC;IAEF,IAAI,CAACE,GAAG,CAACO,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IACjE;IAEA,MAAMC,aAAa,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAEtC,OAAOD,aAAa;EACtB,CAAC,CAAC,OAAOE,CAAC,EAAE;IACV,MAAMA,CAAC;EACT;AACF,CAAC;;AAMD;AACF,OAAO,MAAMG,mBAAmB,GAAG,MAAAA,CAAOjB,UAAU,EAAEC,KAAK,KAAK;EAC9D,IAAI;IACA,MAAMC,GAAG,GAAG,iFAAiF;IAE7F,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MACzBG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,UAAU;QAAEC;MAAM,CAAC;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACE,GAAG,CAACO,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACtD;IAEA,MAAMO,IAAI,GAAG,MAAMf,GAAG,CAACgB,IAAI,CAAC,CAAC;IAC7B,OAAOD,IAAI,CAACjB,KAAK;EACrB,CAAC,CAAC,OAAOa,CAAC,EAAE;IACR,MAAMA,CAAC;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}