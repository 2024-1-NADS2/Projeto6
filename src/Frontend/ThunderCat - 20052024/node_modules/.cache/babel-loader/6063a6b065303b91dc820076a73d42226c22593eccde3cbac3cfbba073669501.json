{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ThunderCat - 06052024\\\\src\\\\components\\\\Postagem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/Postagem.css'; // Importe o arquivo CSS diretamente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Postagem() {\n  _s();\n  const [posts, setPosts] = useState([]); // Estado para armazenar as postagens\n  const [currentPage, setCurrentPage] = useState(1); // Estado para controlar a página atual\n  const [loading, setLoading] = useState(false); // Estado para controlar se estamos carregando postagens\n\n  const endPageRef = useRef(null);\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleObserver, {\n      threshold: 0.1\n    }); // Define o threshold para o observer\n    observer.observe(endPageRef.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, []); // O array vazio indica que esse efeito só é executado uma vez, semelhante ao componentDidMount\n\n  useEffect(() => {\n    getPost(); // Carrega as postagens iniciais quando o componente é montado\n  }, []); // O array vazio indica que esse efeito só é executado uma vez, semelhante ao componentDidMount\n\n  const handleObserver = entries => {\n    if (entries[0].isIntersecting && !loading) {\n      getPost(); // Carrega mais postagens quando a div final é visível na viewport\n    }\n  };\n  const getPost = async () => {\n    setLoading(true); // Define que estamos carregando postagens\n    const response = await fetch(`https://dev.to/api/articles?per_page=5&page=${currentPage}`);\n    const data = await response.json();\n    setPosts(prevPosts => [...prevPosts, ...data]); // Adiciona as novas postagens ao estado anterior\n    setCurrentPage(prevPage => prevPage + 1); // Atualiza a página atual\n    setLoading(false); // Define que terminamos de carregar as postagens\n  };\n  const likePost = id => {\n    // Sua lógica para lidar com a função de curtir postagens\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postagem\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"informacoes\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"usuario\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"miniaturaperfil\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.avatar,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"nome-do-usuario\",\n            children: post.author\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.image,\n        alt: \"\",\n        className: \"capa-post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conteudo-da-postagem\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reacoes-icones\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => likePost(post.id),\n            className: \"likebutton\",\n            children: \"Like\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: EnviarIcon,\n            alt: \"\",\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"descricao\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"span\",\n            children: post.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this), post.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: endPageRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), \" \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(Postagem, \"92mDU9Jbshso7zA4Q+hKLs52wsI=\");\n_c = Postagem;\nexport default Postagem;\nvar _c;\n$RefreshReg$(_c, \"Postagem\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Postagem","_s","posts","setPosts","currentPage","setCurrentPage","loading","setLoading","endPageRef","observer","IntersectionObserver","handleObserver","threshold","observe","current","disconnect","getPost","entries","isIntersecting","response","fetch","data","json","prevPosts","prevPage","likePost","id","children","map","post","className","src","avatar","alt","fileName","_jsxFileName","lineNumber","columnNumber","author","image","onClick","EnviarIcon","user","content","ref","_c","$RefreshReg$"],"sources":["C:/Users/mathe/OneDrive/Área de Trabalho/ThunderCat - 06052024/src/components/Postagem.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/Postagem.css'; // Importe o arquivo CSS diretamente\r\n\r\nfunction Postagem() {\r\n    const [posts, setPosts] = useState([]); // Estado para armazenar as postagens\r\n    const [currentPage, setCurrentPage] = useState(1); // Estado para controlar a página atual\r\n    const [loading, setLoading] = useState(false); // Estado para controlar se estamos carregando postagens\r\n\r\n    const endPageRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(handleObserver, { threshold: 0.1 }); // Define o threshold para o observer\r\n        observer.observe(endPageRef.current);\r\n\r\n        return () => {\r\n            observer.disconnect();\r\n        };\r\n    }, []); // O array vazio indica que esse efeito só é executado uma vez, semelhante ao componentDidMount\r\n\r\n    useEffect(() => {\r\n        getPost(); // Carrega as postagens iniciais quando o componente é montado\r\n    }, []); // O array vazio indica que esse efeito só é executado uma vez, semelhante ao componentDidMount\r\n\r\n    const handleObserver = (entries) => {\r\n        if (entries[0].isIntersecting && !loading) {\r\n            getPost(); // Carrega mais postagens quando a div final é visível na viewport\r\n        }\r\n    };\r\n\r\n    const getPost = async () => {\r\n        setLoading(true); // Define que estamos carregando postagens\r\n        const response = await fetch(`https://dev.to/api/articles?per_page=5&page=${currentPage}`);\r\n        const data = await response.json();\r\n        setPosts((prevPosts) => [...prevPosts, ...data]); // Adiciona as novas postagens ao estado anterior\r\n        setCurrentPage((prevPage) => prevPage + 1); // Atualiza a página atual\r\n        setLoading(false); // Define que terminamos de carregar as postagens\r\n    };\r\n\r\n    const likePost = (id) => {\r\n        // Sua lógica para lidar com a função de curtir postagens\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {posts.map((post) => (\r\n                <div key={post.id} className=\"postagem\">\r\n                    <div className=\"informacoes\">\r\n                        <div className=\"usuario\">\r\n                            <div className=\"miniaturaperfil\">\r\n                                <img src={post.avatar} alt=\"\" />\r\n                            </div>\r\n                            <p className=\"nome-do-usuario\">{post.author}</p>\r\n                        </div>\r\n                    </div>\r\n                    <img src={post.image} alt=\"\" className=\"capa-post\" />\r\n                    <div className=\"conteudo-da-postagem\">\r\n                        <div className=\"reacoes-icones\">\r\n                            <button onClick={() => likePost(post.id)} className=\"likebutton\">\r\n                                Like\r\n                            </button>\r\n                            <img src={EnviarIcon} alt=\"\" className=\"icon\" />\r\n                        </div>\r\n                        <p className=\"descricao\">\r\n                            <span className=\"span\">{post.user}</span>\r\n                            {post.content}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            <div ref={endPageRef}></div> {/* Esta div será usada como ponto de referência para o IntersectionObserver */}\r\n            {loading && <div>Carregando...</div>} {/* Exibe \"Carregando...\" enquanto as postagens estão sendo carregadas */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Postagem;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C,MAAMa,UAAU,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE/BD,SAAS,CAAC,MAAM;IACZ,MAAMa,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,cAAc,EAAE;MAAEC,SAAS,EAAE;IAAI,CAAC,CAAC,CAAC,CAAC;IAC/EH,QAAQ,CAACI,OAAO,CAACL,UAAU,CAACM,OAAO,CAAC;IAEpC,OAAO,MAAM;MACTL,QAAQ,CAACM,UAAU,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERnB,SAAS,CAAC,MAAM;IACZoB,OAAO,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAML,cAAc,GAAIM,OAAO,IAAK;IAChC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACC,cAAc,IAAI,CAACZ,OAAO,EAAE;MACvCU,OAAO,CAAC,CAAC,CAAC,CAAC;IACf;EACJ,CAAC;EAED,MAAMA,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxBT,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAE,+CAA8ChB,WAAY,EAAC,CAAC;IAC1F,MAAMiB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCnB,QAAQ,CAAEoB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC,CAAC;IAClDhB,cAAc,CAAEmB,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5CjB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAMkB,QAAQ,GAAIC,EAAE,IAAK;IACrB;EAAA,CACH;EAED,oBACI3B,OAAA;IAAA4B,QAAA,GACKzB,KAAK,CAAC0B,GAAG,CAAEC,IAAI,iBACZ9B,OAAA;MAAmB+B,SAAS,EAAC,UAAU;MAAAH,QAAA,gBACnC5B,OAAA;QAAK+B,SAAS,EAAC,aAAa;QAAAH,QAAA,eACxB5B,OAAA;UAAK+B,SAAS,EAAC,SAAS;UAAAH,QAAA,gBACpB5B,OAAA;YAAK+B,SAAS,EAAC,iBAAiB;YAAAH,QAAA,eAC5B5B,OAAA;cAAKgC,GAAG,EAAEF,IAAI,CAACG,MAAO;cAACC,GAAG,EAAC;YAAE;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACNtC,OAAA;YAAG+B,SAAS,EAAC,iBAAiB;YAAAH,QAAA,EAAEE,IAAI,CAACS;UAAM;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNtC,OAAA;QAAKgC,GAAG,EAAEF,IAAI,CAACU,KAAM;QAACN,GAAG,EAAC,EAAE;QAACH,SAAS,EAAC;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrDtC,OAAA;QAAK+B,SAAS,EAAC,sBAAsB;QAAAH,QAAA,gBACjC5B,OAAA;UAAK+B,SAAS,EAAC,gBAAgB;UAAAH,QAAA,gBAC3B5B,OAAA;YAAQyC,OAAO,EAAEA,CAAA,KAAMf,QAAQ,CAACI,IAAI,CAACH,EAAE,CAAE;YAACI,SAAS,EAAC,YAAY;YAAAH,QAAA,EAAC;UAEjE;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTtC,OAAA;YAAKgC,GAAG,EAAEU,UAAW;YAACR,GAAG,EAAC,EAAE;YAACH,SAAS,EAAC;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CAAC,eACNtC,OAAA;UAAG+B,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACpB5B,OAAA;YAAM+B,SAAS,EAAC,MAAM;YAAAH,QAAA,EAAEE,IAAI,CAACa;UAAI;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,EACxCR,IAAI,CAACc,OAAO;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA,GArBAR,IAAI,CAACH,EAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAsBZ,CACR,CAAC,eACFtC,OAAA;MAAK6C,GAAG,EAAEpC;IAAW;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,KAAC,EAC5B/B,OAAO,iBAAIP,OAAA;MAAA4B,QAAA,EAAK;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEd;AAACpC,EAAA,CAtEQD,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AAwEjB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}