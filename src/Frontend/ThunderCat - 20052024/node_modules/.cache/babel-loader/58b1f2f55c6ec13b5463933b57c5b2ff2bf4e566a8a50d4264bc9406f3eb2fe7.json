{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ThunderCat - 06052024\\\\src\\\\pages\\\\Feed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Postagem from '../components/Postagem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Feed() {\n  _s();\n  // Defina um estado para armazenar as postagens\n  const [postagens, setPostagens] = useState([]);\n\n  // Função para carregar mais postagens\n  const carregarMaisPostagens = () => {\n    // Implemente a lógica para carregar mais postagens da sua API aqui\n    // Por exemplo, você pode chamar sua API para buscar mais dados\n    // e adicionar esses novos dados ao estado de postagens\n  };\n\n  // Adicione um evento de rolagem para carregar mais postagens quando o usuário chegar ao final da página\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n        carregarMaisPostagens();\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []); // Executa este efeito apenas uma vez na montagem do componente\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postagem-container\",\n      children: postagens.map((postagem, index) => /*#__PURE__*/_jsxDEV(Postagem, {\n        ...postagem\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(Feed, \"CMOsNNbak9ERoQyRdcph0oRKwKI=\");\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","Header","Postagem","jsxDEV","_jsxDEV","Feed","_s","postagens","setPostagens","carregarMaisPostagens","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","postagem","index","_c","$RefreshReg$"],"sources":["C:/Users/mathe/OneDrive/Área de Trabalho/ThunderCat - 06052024/src/pages/Feed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Postagem from '../components/Postagem';\r\n\r\nfunction Feed() {\r\n    // Defina um estado para armazenar as postagens\r\n    const [postagens, setPostagens] = useState([]);\r\n\r\n    // Função para carregar mais postagens\r\n    const carregarMaisPostagens = () => {\r\n        // Implemente a lógica para carregar mais postagens da sua API aqui\r\n        // Por exemplo, você pode chamar sua API para buscar mais dados\r\n        // e adicionar esses novos dados ao estado de postagens\r\n    };\r\n\r\n    // Adicione um evento de rolagem para carregar mais postagens quando o usuário chegar ao final da página\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\r\n                carregarMaisPostagens();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []); // Executa este efeito apenas uma vez na montagem do componente\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div className=\"postagem-container\">\r\n                {/* Renderize as postagens */}\r\n                {postagens.map((postagem, index) => (\r\n                    <Postagem key={index} {...postagem} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMU,qBAAqB,GAAGA,CAAA,KAAM;IAChC;IACA;IACA;EAAA,CACH;;EAED;EACAT,SAAS,CAAC,MAAM;IACZ,MAAMU,YAAY,GAAGA,CAAA,KAAM;MACvB,IAAIC,MAAM,CAACC,WAAW,GAAGC,QAAQ,CAACC,eAAe,CAACC,SAAS,KAAKF,QAAQ,CAACC,eAAe,CAACE,YAAY,EAAE;QACnGP,qBAAqB,CAAC,CAAC;MAC3B;IACJ,CAAC;IAEDE,MAAM,CAACM,gBAAgB,CAAC,QAAQ,EAAEP,YAAY,CAAC;IAC/C,OAAO,MAAMC,MAAM,CAACO,mBAAmB,CAAC,QAAQ,EAAER,YAAY,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIN,OAAA;IAAAe,QAAA,gBACIf,OAAA,CAACH,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVnB,OAAA;MAAKoB,SAAS,EAAC,oBAAoB;MAAAL,QAAA,EAE9BZ,SAAS,CAACkB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC3BvB,OAAA,CAACF,QAAQ;QAAA,GAAiBwB;MAAQ,GAAnBC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACjB,EAAA,CAlCQD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAoCb,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}