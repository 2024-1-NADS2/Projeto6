{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\ThunderCat - 06052024\\\\src\\\\components\\\\Postagem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Postagem from './Postagem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Feed() {\n  _s();\n  // Estado para armazenar as postagens\n  const [postagens, setPostagens] = useState([]);\n  // Estado para controlar a página atual\n  const [pagina, setPagina] = useState(1);\n  // Estado para indicar se há mais postagens para carregar\n  const [hasMore, setHasMore] = useState(true);\n\n  // Função para carregar mais postagens\n  const carregarMaisPostagens = () => {\n    // Simular uma requisição assíncrona para buscar mais postagens\n    // Aqui você deve substituir esse trecho pelo código que busca as postagens do backend\n    setTimeout(() => {\n      // Simular a adição de novas postagens\n      const novasPostagens = Array.from({\n        length: 5\n      }, (_, index) => ({\n        id: postagens.length + index + 1,\n        // Gerar um ID único para cada postagem\n        // Substitua as informações das postagens por aquelas que você obtém do backend\n        usuario: 'Novo Usuário',\n        curtidas: 0,\n        descricao: 'Nova postagem',\n        tempo: 'Agora'\n      }));\n      // Adicionar as novas postagens ao estado\n      setPostagens([...postagens, ...novasPostagens]);\n      // Atualizar a página atual\n      setPagina(pagina + 1);\n      // Atualizar o estado de hasMore para indicar se há mais postagens para carregar\n      setHasMore(false); // Defina como true se houver mais postagens para carregar\n    }, 1000); // Tempo de simulação da requisição\n  };\n\n  // Efeito para carregar mais postagens quando o usuário chegar ao final da página\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\n      if (hasMore) {\n        carregarMaisPostagens();\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [hasMore]); // Executar o efeito sempre que o estado de hasMore mudar\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [postagens.map(postagem => /*#__PURE__*/_jsxDEV(Postagem, {\n      postagem: postagem\n    }, postagem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)), hasMore && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando mais postagens...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Feed, \"ArOG5bdUmiuk3WRR0/ZVY9MEY08=\");\n_c = Feed;\nexport default Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["React","useState","useEffect","Postagem","jsxDEV","_jsxDEV","Feed","_s","postagens","setPostagens","pagina","setPagina","hasMore","setHasMore","carregarMaisPostagens","setTimeout","novasPostagens","Array","from","length","_","index","id","usuario","curtidas","descricao","tempo","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","children","map","postagem","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mathe/OneDrive/Área de Trabalho/ThunderCat - 06052024/src/components/Postagem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Postagem from './Postagem';\r\n\r\nfunction Feed() {\r\n    // Estado para armazenar as postagens\r\n    const [postagens, setPostagens] = useState([]);\r\n    // Estado para controlar a página atual\r\n    const [pagina, setPagina] = useState(1);\r\n    // Estado para indicar se há mais postagens para carregar\r\n    const [hasMore, setHasMore] = useState(true);\r\n\r\n    // Função para carregar mais postagens\r\n    const carregarMaisPostagens = () => {\r\n        // Simular uma requisição assíncrona para buscar mais postagens\r\n        // Aqui você deve substituir esse trecho pelo código que busca as postagens do backend\r\n        setTimeout(() => {\r\n            // Simular a adição de novas postagens\r\n            const novasPostagens = Array.from({ length: 5 }, (_, index) => ({\r\n                id: postagens.length + index + 1, // Gerar um ID único para cada postagem\r\n                // Substitua as informações das postagens por aquelas que você obtém do backend\r\n                usuario: 'Novo Usuário',\r\n                curtidas: 0,\r\n                descricao: 'Nova postagem',\r\n                tempo: 'Agora',\r\n            }));\r\n            // Adicionar as novas postagens ao estado\r\n            setPostagens([...postagens, ...novasPostagens]);\r\n            // Atualizar a página atual\r\n            setPagina(pagina + 1);\r\n            // Atualizar o estado de hasMore para indicar se há mais postagens para carregar\r\n            setHasMore(false); // Defina como true se houver mais postagens para carregar\r\n        }, 1000); // Tempo de simulação da requisição\r\n    };\r\n\r\n    // Efeito para carregar mais postagens quando o usuário chegar ao final da página\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\r\n            if (hasMore) {\r\n                carregarMaisPostagens();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, [hasMore]); // Executar o efeito sempre que o estado de hasMore mudar\r\n\r\n    return (\r\n        <div>\r\n            {/* Mapear as postagens e renderizar cada uma delas */}\r\n            {postagens.map(postagem => (\r\n                <Postagem key={postagem.id} postagem={postagem} />\r\n            ))}\r\n            {/* Adicionar um indicador de carregamento no final do feed */}\r\n            {hasMore && <p>Carregando mais postagens...</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACA,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvC;EACA,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMa,qBAAqB,GAAGA,CAAA,KAAM;IAChC;IACA;IACAC,UAAU,CAAC,MAAM;MACb;MACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAE,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,MAAM;QAC5DC,EAAE,EAAEd,SAAS,CAACW,MAAM,GAAGE,KAAK,GAAG,CAAC;QAAE;QAClC;QACAE,OAAO,EAAE,cAAc;QACvBC,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE,eAAe;QAC1BC,KAAK,EAAE;MACX,CAAC,CAAC,CAAC;MACH;MACAjB,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE,GAAGQ,cAAc,CAAC,CAAC;MAC/C;MACAL,SAAS,CAACD,MAAM,GAAG,CAAC,CAAC;MACrB;MACAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACd,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACZ,MAAMyB,YAAY,GAAGA,CAAA,KAAM;MACvB,IAAIC,MAAM,CAACC,WAAW,GAAGC,QAAQ,CAACC,eAAe,CAACC,SAAS,KAAKF,QAAQ,CAACC,eAAe,CAACE,YAAY,EAAE;MACvG,IAAIrB,OAAO,EAAE;QACTE,qBAAqB,CAAC,CAAC;MAC3B;IACJ,CAAC;IAEDc,MAAM,CAACM,gBAAgB,CAAC,QAAQ,EAAEP,YAAY,CAAC;IAC/C,OAAO,MAAMC,MAAM,CAACO,mBAAmB,CAAC,QAAQ,EAAER,YAAY,CAAC;EACnE,CAAC,EAAE,CAACf,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf,oBACIP,OAAA;IAAA+B,QAAA,GAEK5B,SAAS,CAAC6B,GAAG,CAACC,QAAQ,iBACnBjC,OAAA,CAACF,QAAQ;MAAmBmC,QAAQ,EAAEA;IAAS,GAAhCA,QAAQ,CAAChB,EAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CACpD,CAAC,EAED9B,OAAO,iBAAIP,OAAA;MAAA+B,QAAA,EAAG;IAA4B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEd;AAACnC,EAAA,CAtDQD,IAAI;AAAAqC,EAAA,GAAJrC,IAAI;AAwDb,eAAeA,IAAI;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}